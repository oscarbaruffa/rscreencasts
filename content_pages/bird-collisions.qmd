---
title: |
  Bird Collisions
description: |
  Bootstrapping
date: 2019-05-02
date-format: long
aliases:
  - "Bird Collisions.html"
---

Notable topics: Bootstrapping

Recorded on: 2019-05-02

Timestamps by: Alex Cookson

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/bird-collisions.Rmd)

## Screencast

<div id="yt-player" data-video-id="zjWm__nFLXI"></div>

## Timestamps

```{=html}
<div id="topics">
  <div class="topic">
    <h3 id="ts-165">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(165, this)">0:2:45</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Analyzing when NAs appear in a dimension</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-450">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(450, this)">0:7:30</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">gather</span></div><div></div></div>
    <div class="topic_description">
      <p>Looking at multiple categorical variable at the same time by gathering them into one column and eventually graphing each as a different facet</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-570">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(570, this)">0:9:30</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Re-order facet graphs according to which ones have the fewest categories in them to ones that have the most</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1245">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1245, this)">0:20:45</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Geometric mean for estimating counts when there are a lot of low values (1-3 bird collisions, in this case)</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1395">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1395, this)">0:23:15</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Filling in &quot;blank&quot; observations where there were no observations made</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1620">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1620, this)">0:27:00</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Using log+1 to convert a dimension with values of 0 into a log scale</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1740">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1740, this)">0:29:00</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Adding confidence bounds for data using a geometric mean (where he first gets the idea of bootstrapping)</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1920">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1920, this)">0:32:00</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Actual coding of bootstrap starts</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-2310">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(2310, this)">0:38:30</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Adding confidence bounds using bootstrap data</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-2520">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(2520, this)">0:42:00</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Investigating potential confounding variables</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-2655">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(2655, this)">0:44:15</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Discussing approaches to dealing with confounding variables</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-2805">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(2805, this)">0:46:45</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">complete</span></div><div></div></div>
    <div class="topic_description">
      <p>Using complete function to get explicit NA values</p>

    </div>
  </div>
</div>
```
     
<script>
// 2. This code loads the IFrame Player API code asynchronously.
var tag = document.createElement("script");

tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName("script")[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var videoId = document.getElementById("yt-player").dataset.videoId;
var player;
function onYouTubeIframeAPIReady() {
  player = new YT.Player("yt-player", {
    height: "486",
    width: "864",
    videoId: videoId,
    playerVars: {
      "playsinline": 1
    },
    events: {
      onStateChange: function(event) {
        if (event.data == YT.PlayerState.PLAYING) {
          followTimestamps()
        }
      }
    }
  });
}

function playerSkipToTimestamp(seconds, tsElement) {
  player.seekTo(seconds, true)
  tsElement.scrollIntoView()
  document.getElementById("screencast").scrollIntoView()
}

const timestamps = Array.from(document.querySelectorAll('.topic h3[id^="ts-"]'))
  .map(el => el.id.replace('ts-', ''))

function followTimestamps() {
  if (player.getPlayerState() !== 1) {
    return
  }
  const currentTime = `${Math.floor(player.getCurrentTime())}`
  if (timestamps.includes(currentTime)) {
    const el = document.getElementById(`ts-${currentTime}`)
    if (el) {
      el.scrollIntoView()
      document.getElementById("screencast").scrollIntoView()
    }
  }
  setTimeout(followTimestamps, 1000)
}
</script>
