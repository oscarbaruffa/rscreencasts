---
title: |
  Women's World Cup
description: |
  NA
date: 2019-07-21
date-format: long
aliases:
  - "Women's World Cup.html"
---

Notable topics: NA

Recorded on: 2019-07-21

Timestamps by: Alex Cookson

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/womens-world-cup.Rmd)

## Screencast

<div id="yt-player" data-video-id="ZOQSuapvHqA"></div>

## Timestamps

```{=html}
<div id="topics">
  <div class="topic">
    <h3 id="ts-135">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(135, this)">0:2:15</button>
    </h3>
    <div class="topic_badges"><div></div><div><span class="badge-packages badge bg-primary">countrycode</span></div></div>
    <div class="topic_description">
      <p>Adding country names using countrycode package</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-225">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(225, this)">0:3:45</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Web scraping country codes from Wikipedia</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-360">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(360, this)">0:6:00</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Combining tables that are separate lists into one dataframe</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-840">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(840, this)">0:14:00</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">rev</span></div><div></div></div>
    <div class="topic_description">
      <p>Using rev function (reverse) to turn multiple rows of soccer match scores into one row (base team and opposing team)</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1590">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1590, this)">0:26:30</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">geom_smooth</span></div><div></div></div>
    <div class="topic_description">
      <p>Applying a geom_smooth linear model line to a scatter plot, then facetting it</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1710">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1710, this)">0:28:30</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">geom_abline</span></div><div></div></div>
    <div class="topic_description">
      <p>Adding a line with a slope of 1 (x = y) using geom_abline</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-2400">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(2400, this)">0:40:00</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Pulling out elements of a list that is embedded in a dataframe</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-4185">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(4185, this)">1:09:45</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">glue</span></div><div><span class="badge-packages badge bg-primary">glue</span></div></div>
    <div class="topic_description">
      <p>Using glue function to add context to facet titles</p>

    </div>
  </div>
</div>
```
     
<script>
// 2. This code loads the IFrame Player API code asynchronously.
var tag = document.createElement("script");

tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName("script")[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var videoId = document.getElementById("yt-player").dataset.videoId;
var player;
function onYouTubeIframeAPIReady() {
  player = new YT.Player("yt-player", {
    height: "486",
    width: "864",
    videoId: videoId,
    playerVars: {
      "playsinline": 1
    },
    events: {
      onStateChange: function(event) {
        if (event.data == YT.PlayerState.PLAYING) {
          followTimestamps()
        }
      }
    }
  });
}

function playerSkipToTimestamp(seconds, tsElement) {
  player.seekTo(seconds, true)
  tsElement.scrollIntoView()
  document.getElementById("screencast").scrollIntoView()
}

const timestamps = Array.from(document.querySelectorAll('.topic h3[id^="ts-"]'))
  .map(el => el.id.replace('ts-', ''))

function followTimestamps() {
  if (player.getPlayerState() !== 1) {
    return
  }
  const currentTime = `${Math.floor(player.getCurrentTime())}`
  if (timestamps.includes(currentTime)) {
    const el = document.getElementById(`ts-${currentTime}`)
    if (el) {
      el.scrollIntoView()
      document.getElementById("screencast").scrollIntoView()
    }
  }
  setTimeout(followTimestamps, 1000)
}
</script>
