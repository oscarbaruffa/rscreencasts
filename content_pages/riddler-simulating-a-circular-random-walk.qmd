---
title: |
  Riddler: Simulating a Circular Random Walk
description: |
  Simulation
date: 2020-11-22
date-format: long

---

Notable topics: Simulation

Recorded on: 2020-11-22

Timestamps by: Alex Cookson

[View code](NA)

## Screencast

<div id="yt-player" data-video-id="b1oKh9eeqkY"></div>

## Timestamps

```{=html}
<div id="topics">
  <div class="topic">
    <h3 id="ts-85">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(85, this)">0:1:25</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">sample</span><span class="badge-functions badge bg-info">cumsum</span></div><div></div></div>
    <div class="topic_description">
      <p>Using <code>sample()</code> and <code>cumsum()</code> to simulate a random walk</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-150">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(150, this)">0:2:30</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">%%</span></div><div></div></div>
    <div class="topic_description">
      <p>Using <code>%%</code> (modulo operator) to &quot;close&quot; the circle (set the number of people in the circle)</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-220">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(220, this)">0:3:40</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">crossing</span></div><div></div></div>
    <div class="topic_description">
      <p>Using <code>crossing</code> function to set up &quot;tidy&quot; simulation (gives you all possible combinations of values you provide it)</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-310">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(310, this)">0:5:10</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">distinct</span></div><div></div></div>
    <div class="topic_description">
      <p>Using <code>distinct</code> function and its <code>.keep_all</code> argument to get only the first unique set of the variables you give it</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-495">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(495, this)">0:8:15</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Visualizing the number of steps it takes for the sauce to reach people at differents seats</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-820">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(820, this)">0:13:40</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Visualizing the distribution of number of steps it takes to reach each seat</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1590">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1590, this)">0:26:30</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Investigating the parabolic shape of average number of steps to reach a given seat</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1720">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1720, this)">0:28:40</button>
    </h3>
    <div class="topic_badges"><div><span class="badge-functions badge bg-info">lm</span><span class="badge-functions badge bg-info">I</span></div><div></div></div>
    <div class="topic_description">
      <p>Using <code>lm</code> and <code>I</code> functions to calculate formula of the parabola describing average number of steps</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-1815">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(1815, this)">0:30:15</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Starting to vary the size of the table</p>

    </div>
  </div>
  <div class="topic">
    <h3 id="ts-2325">
      <button class="btn btn-link btn-timestamp" onClick="playerSkipToTimestamp(2325, this)">0:38:45</button>
    </h3>
    <div class="topic_badges"><div></div><div></div></div>
    <div class="topic_description">
      <p>Summary of screencast</p>

    </div>
  </div>
</div>
```
     
<script>
// 2. This code loads the IFrame Player API code asynchronously.
var tag = document.createElement("script");

tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName("script")[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var videoId = document.getElementById("yt-player").dataset.videoId;
var player;
function onYouTubeIframeAPIReady() {
  player = new YT.Player("yt-player", {
    height: "486",
    width: "864",
    videoId: videoId,
    playerVars: {
      "playsinline": 1
    },
    events: {
      onStateChange: function(event) {
        if (event.data == YT.PlayerState.PLAYING) {
          followTimestamps()
        }
      }
    }
  });
}

function playerSkipToTimestamp(seconds, tsElement) {
  player.seekTo(seconds, true)
  tsElement.scrollIntoView()
  document.getElementById("screencast").scrollIntoView()
}

const timestamps = Array.from(document.querySelectorAll('.topic h3[id^="ts-"]'))
  .map(el => el.id.replace('ts-', ''))

function followTimestamps() {
  if (player.getPlayerState() !== 1) {
    return
  }
  const currentTime = `${Math.floor(player.getCurrentTime())}`
  if (timestamps.includes(currentTime)) {
    const el = document.getElementById(`ts-${currentTime}`)
    if (el) {
      el.scrollIntoView()
      document.getElementById("screencast").scrollIntoView()
    }
  }
  setTimeout(followTimestamps, 1000)
}
</script>
